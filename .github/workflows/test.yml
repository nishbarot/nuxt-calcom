name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and activate pnpm from packageManager
        shell: bash
        run: |
          corepack enable
          VER=$(node -p "require('./package.json').packageManager.split('@')[1].split('+')[0]")
          corepack prepare "pnpm@${VER}" --activate
          corepack pnpm -v

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Clean workspace (keep pnpm lockfile)
        shell: bash
        run: |
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -f "package-lock.json" ]; then rm -f package-lock.json; fi

      - name: Install dependencies
        run: corepack pnpm install --no-frozen-lockfile

      - name: Rebuild native modules (oxc-parser, esbuild)
        run: corepack pnpm rebuild oxc-parser esbuild || true

      - name: Run unit tests
        run: corepack pnpm test:unit

      - name: Generate coverage report
        run: corepack pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and activate pnpm from packageManager
        shell: bash
        run: |
          corepack enable
          VER=$(node -p "require('./package.json').packageManager.split('@')[1].split('+')[0]")
          corepack prepare "pnpm@${VER}" --activate
          corepack pnpm -v

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Clean workspace (keep pnpm lockfile)
        shell: bash
        run: |
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -f "package-lock.json" ]; then rm -f package-lock.json; fi

      - name: Install dependencies
        run: corepack pnpm install --no-frozen-lockfile

      - name: Rebuild native modules (oxc-parser, esbuild)
        run: corepack pnpm rebuild oxc-parser esbuild || true

      - name: Install Playwright browsers
        run: corepack pnpm exec playwright install --with-deps

      - name: Build module
        run: corepack pnpm build

      - name: Run integration tests
        run: corepack pnpm test:integration

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # accessibility-tests:
  #   name: Accessibility Tests
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: '10'
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'pnpm'
  #
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Run accessibility tests
  #       run: pnpm test:accessibility
  #
  #   # TODO: Re-enable when accessibility tests are implemented

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and activate pnpm from packageManager
        shell: bash
        run: |
          corepack enable
          VER=$(node -p "require('./package.json').packageManager.split('@')[1].split('+')[0]")
          corepack prepare "pnpm@${VER}" --activate
          corepack pnpm -v

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Clean workspace (keep pnpm lockfile)
        shell: bash
        run: |
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -f "package-lock.json" ]; then rm -f package-lock.json; fi

      - name: Install dependencies
        run: corepack pnpm install --no-frozen-lockfile

      - name: Rebuild native modules (oxc-parser, esbuild)
        run: corepack pnpm rebuild oxc-parser esbuild || true

      - name: Run linter
        run: corepack pnpm lint

      - name: Check formatting
        run: corepack pnpm format:check

      - name: Type check
        run: corepack pnpm build

  build-test:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and activate pnpm from packageManager
        shell: bash
        run: |
          corepack enable
          VER=$(node -p "require('./package.json').packageManager.split('@')[1].split('+')[0]")
          corepack prepare "pnpm@${VER}" --activate
          corepack pnpm -v

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: corepack pnpm install --no-frozen-lockfile

      - name: Rebuild native modules (oxc-parser, esbuild)
        run: corepack pnpm rebuild oxc-parser esbuild || true

      - name: Build module
        run: corepack pnpm build

      - name: Test playground build
        run: corepack pnpm dev:build

  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and activate pnpm from packageManager
        shell: bash
        run: |
          corepack enable
          VER=$(node -p "require('./package.json').packageManager.split('@')[1].split('+')[0]")
          corepack prepare "pnpm@${VER}" --activate
          corepack pnpm -v

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Clean workspace (keep pnpm lockfile)
        shell: bash
        run: |
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -f "package-lock.json" ]; then rm -f package-lock.json; fi

      - name: Install dependencies
        run: corepack pnpm install --frozen-lockfile

      - name: Run unit tests
        run: corepack pnpm test:unit

      - name: Build module
        run: corepack pnpm build
